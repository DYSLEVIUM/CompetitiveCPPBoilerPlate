{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Competitive C++ Template": {
    "prefix": "gt",
    "body": [
      "$BLOCK_COMMENT_START",
      "\tDYSLEVIUM's template",
      "\tDate: $CURRENT_DATE/$CURRENT_MONTH_NAME/$CURRENT_YEAR",
      "\tTime: $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      "$BLOCK_COMMENT_END\n",
      "$LINE_COMMENT clang-format off\n",
      "$LINE_COMMENT headers",
      "#ifdef DYSLEVIUM",
      "\t#include \"dyslevium.h\"",
      "#else",
      "\t$LINE_COMMENT optimizations done at compile time",
      "\t#pragma GCC optimize(\"Ofast,fast-math,unroll-loops\")",
      "\t#pragma GCC target(\"avx,avx2,fma,bmi,bmi2,lzcnt,popcnt\")\n",
      "\t#include <bits/stdc++.h>\n",
      "\t#include <ext/pb_ds/assoc_container.hpp>",
      "\t#include <ext/pb_ds/tree_policy.hpp>",
      "#endif\n",
      "$LINE_COMMENT custom functions",
      "std::mt19937_64 RNG(std::chrono::high_resolution_clock::now().time_since_epoch().count());\t$LINE_COMMENT generator for shuffle and other generator which require random numbers\n",
      "$LINE_COMMENT modified custom hash to be used with templates from https://codeforces.com/blog/entry/62393",
      "template <typename T>",
      "struct custom_hash {",
      "\tstatic uint64_t splitmix64(uint64_t x) {",
      "\t\tx += 0x9e3779b97f4a7c15;",
      "\t\tx = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
      "\t\tx = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
      "\t\treturn x ^ (x >> 31);",
      "\t}\n",
      "\tsize_t operator()(T x) const {",
      "\t\tstatic const uint64_t FIXED_RANDOM = RNG();",
      "\t\treturn splitmix64(std::hash<T>()(x) + FIXED_RANDOM);",
      "\t}",
      "};\n",
      "$LINE_COMMENT aliases",
      "using ll = long long;",
      "using ld = long double;",
      "using pl = std::pair<ll, ll>;",
      "using vl = std::vector<ll>;",
      "using vvl = std::vector<vl>;",
      "using vpl = std::vector<pl>;\n",
      "#ifndef DYSLEVIUM",
      "\ttemplate <typename T>",
      "\tusing pbds_ordered_set = __gnu_pbds::tree<T, __gnu_pbds::null_type, std::less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;  // find_by_order, order_of_key\n",
      "\ttemplate <typename T1, typename T2>",
      "\tusing pbds_unordered_map = __gnu_pbds::gp_hash_table<T1, T2, custom_hash<T1>>; // 4x - 10x faster than stl unordered_map",
      "#endif",
      "$LINE_COMMENT constants",
      "static constexpr long double EPS(1e-9);",
      "static constexpr long long MOD(1e9 + 7);  //  or (119 << 23) + 1; primitive_root = 3; // = 998244353",
      "static constexpr long long INF(0x3f3f3f3f3f3f3f3f);",
      "static constexpr long double PI(3.14159265358979323846);\n",
      "$LINE_COMMENT macros",
      "#define pb push_back",
      "#define eb emplace_back",
      "#define F first",
      "#define S second",
      "#define fo(i, n) for (ll i = 0; i < (ll)n; ++i)",
      "#define Fo(i, k, n) for (ll i = k; k < (ll)n ? i < (ll)n : i > (ll)n; k < (ll)n ? ++i : --i)",
      "#define tr(it, cont) for (auto it = cont.begin(); it != cont.end(); ++it)",
      "#define all(x) x.begin(), x.end()",
      "#define ps(x) std::fixed << std::setprecision(x)",
      "#define set_bits(x) __builtin_popcountll(x)",
      "#define zero_bits(x) __builtin_ctzll(x)",
      "#define mk(arr, n, type) type* arr = new type[n]",
      "#define low(x) char(x | ' ')",
      "$LINE_COMMENT #define upp(x) char(x & '_')",
      "#define upp(x) char(x & '_')",
      "#define sz(x) x.size()\n",
      "$LINE_COMMENT template functions",
      "template <typename T> inline T mod_add(const T& a, const T&  b, const T& mod = MOD) { return a + b > mod ? a + b - mod : (a + b); }",
      "template <typename T> inline T mod_sub(const T& a, const T&  b, const T& mod = MOD) { return a - b < 0 ? a - b + mod : (a - b); }",
      "template <typename T> inline T mod_mul(const T& a, const T&  b, const T& mod = MOD) { return ((((a % mod) * (b % mod)) % mod) + mod) % mod; };",
      "template <typename T> inline T bin_pow(T x, T n) {T res = 1; while (n) { if (n & 1) res *= x; x *= x; n >>= 1; } return res; }",
      "template <typename T> inline T bin_pow_m(T x, T n, const T& mod = MOD) {T res = 1; while (n) { if (n & 1) res = mod_mul(res, x, mod); x = mod_mul(x, x, mod); n >>= 1; } return res % mod; }",
      "template <typename T> inline T mod_inverse(const T& a, const T& mod = MOD) { return bin_pow_m(a, mod - 2, mod); }",
      "template <typename T> inline T mod_div(const T& a, const T& b, const T& mod = MOD) { return mod_mul(a, mod_inverse(b, mod), mod); }\n",
      "$LINE_COMMENT operator overloading",
      "template <typename T> std::istream& operator>>(std::istream &is, std::vector<T> &v){ for (auto &it : v) is >> it; return is; }",
      "template <typename T> std::ostream& operator<<(std::ostream &os, const std::vector<T> &v) { for (const auto &it : v) os << it << ' '; return os; }\n",
      "template <typename T1, typename T2> std::istream& operator>>(std::istream &is, std::pair<T1, T2> &p){ is >> p.first >> p.second; return is; }",
      "template <typename T1, typename T2> std::ostream& operator<<(std::ostream &os, const std::pair<T1, T2> &p) { os << p.first << ' ' << p.second; return os; }\n",
      "$LINE_COMMENT debugging",
      "#ifdef DYSLEVIUM",
      "\t#define deb(x) std::cerr << #x << \" = \" << x << '\\n'",
      "#else",
      "\t#define deb(x)",
      "#endif\n",
      "inline void solve();\n",
      "inline void setup(){",
      "\t$LINE_COMMENT std::ios_base::sync_with_stdio(false);",
      "\tstd::cin.tie(nullptr)->sync_with_stdio(false);\n",
      "\t#ifndef ONLINE_JUDGE  // runs automatically for supported online judges",
      "\t\tfreopen(\"input.in\", \"r\", stdin);",
      "\t\tfreopen(\"output.out\", \"w\", stdout);",
      "\t\tfreopen(\"error.err\", \"w\", stderr);",
      "\t#endif",
      "}\n",
      "int main(int argc, char* argv[]) {",
      "\tsetup();\n",
      "\tauto startTime = std::chrono::high_resolution_clock::now();\n",
      "\tll t = 1;",
      "\t$LINE_COMMENT std::cin >> t;\n",
      "\twhile (t--) solve();\n",
      "\tauto endTime = std::chrono::high_resolution_clock::now();",
      "\tauto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime);\n",
      "\t#ifdef DYSLEVIUM",
      "\t\tstd::cerr << \"\\nTime: \" << duration.count() << \"ms\";",
      "\t#endif\n",
      "\treturn 0;",
      "}\n",
      "using namespace std;\n",
      "$LINE_COMMENT clang-format on\n",
      "inline void solve() {",
      "\t$0",
      "}"
    ],
    "description": "template",
    "scope": "cpp"
  }
}
